#include <WiFi.h>
#include <WebServer.h>

const char* ssid = "FFNET";
const char* password = "W4tchTh3G4M3*";

// Define relays dynamically
struct Relay {
  const char* name;
  const char* ip;
  const char* headerColor; // card header color
};

Relay relays[] = {
  {"Relay 1", "192.168.3.74", "#2196f3"},
  {"Relay 2", "192.168.3.42", "#ff9800"},
  // Add more relays here if needed:
  // {"Relay 3", "192.168.1.53", "#9c27b0"}
};

const int relayCount = sizeof(relays)/sizeof(relays[0]);

WebServer server(80);

String dashboardPage() {
  String html = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
  body { font-family: Arial; text-align:center; margin:30px; background:#1e1e1e; color:#fff; }
  .container { display:flex; justify-content:center; flex-wrap:wrap; }
  .card { margin:20px; padding:20px; border-radius:15px; background:#333; width:180px; box-shadow:0 4px 8px rgba(0,0,0,0.5); }
  .card h2 { margin:0; padding:10px; border-radius:10px 10px 0 0; color:#fff; }
  .state { font-size:24px; margin-top:15px; padding:5px; border-radius:10px; }
  .on { background:#4caf50; color:#fff; }
  .off { background:#f44336; color:#fff; }
  button { padding:15px 30px; margin-top:15px; border:none; border-radius:10px; background:#555; color:#fff; font-size:18px; cursor:pointer; }
  button:hover { background:#777; }
  #log { margin-top:30px; font-size:14px; color:#ccc; max-height:200px; overflow-y:auto; text-align:left; }
</style>
</head>
<body>
<h1>ESP32 Relay Dashboard</h1>

<div class="container">
)rawliteral";

  // Generate cards dynamically
  for(int i=0; i<relayCount; i++){
    html += "<div class=\"card\">";
    html += "<h2 style=\"background:"+String(relays[i].headerColor)+"\">"+String(relays[i].name)+"</h2>";
    html += "<button onclick=\"toggleRelay("+String(i)+")\">Toggle</button>";
    html += "<div id=\"relay"+String(i)+"\" class=\"state off\">--</div>";
    html += "</div>";
  }

  html += R"rawliteral(
</div>

<div id="log"></div>

<script>
let relays = [
)rawliteral";

  // Pass relay IPs and names to JS
  for(int i=0;i<relayCount;i++){
    html += "{name:\""+String(relays[i].name)+"\", ip:\""+String(relays[i].ip)+"\"}";
    if(i<relayCount-1) html += ",";
  }

  html += R"rawliteral(
];

let logEntries = [];

// Update relay state
async function updateState(i){
  try {
    const res = await fetch(`http://${relays[i].ip}/relay/state`);
    const text = await res.text();
    const el = document.getElementById("relay"+i);
    el.innerText = text;
    el.className = "state "+(text=="ON"?"on":"off");
  } catch(e){ console.log("Error updating relay "+i,e);}
}

// Toggle relay safely
async function toggleRelay(i){
  const el = document.getElementById("relay"+i);
  const url = el.innerText=="ON"?"/relay/off":"/relay/on";
  try{
    const res = await fetch(`http://${relays[i].ip}${url}`);
    const text = await res.text();
    el.innerText = text;
    el.className = "state "+(text=="ON"?"on":"off");

    // Update log
    logEntries.unshift(relays[i].name+" toggled to "+text);
    if(logEntries.length>10) logEntries.pop();
    document.getElementById("log").innerHTML = logEntries.join("<br>");
  } catch(e){ console.log("Error toggling relay "+i,e);}
}

// Periodically refresh states
setInterval(()=>{ for(let i=0;i<relays.length;i++) updateState(i); },5000);

// Initial load
for(let i=0;i<relays.length;i++) updateState(i);
</script>
</body>
</html>
)rawliteral";

  return html;
}

void handleRoot() {
  server.send(200, "text/html", dashboardPage());
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while(WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected!");
  Serial.print("Dashboard IP: ");
  Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.begin();
}

void loop() {
  server.handleClient();
}
